class MyDelegate : public QStyledItemDelegate
{
public:
    using QStyledItemDelegate::QStyledItemDelegate;

    void paint(QPainter *painter,
               const QStyleOptionViewItem &option,
               const QModelIndex &index) const override
    {
        painter->save();

        // Фон при выделении/наведении
        if (option.state & QStyle::State_Selected) {
            painter->fillRect(option.rect, option.palette.highlight());
        } else if (option.state & QStyle::State_MouseOver) {
            painter->fillRect(option.rect, option.palette.light());
        } else {
            painter->fillRect(option.rect, option.palette.base());
        }

        // Текст
        QString text = index.data(Qt::DisplayRole).toString();
        painter->drawText(option.rect, Qt::AlignCenter, text);

        painter->restore();
    }

    QSize sizeHint(const QStyleOptionViewItem &option,
                   const QModelIndex &index) const override
    {
        // Можно задать фиксированный размер элемента
        return QSize(100, 30);
    }
};

ui->listWidget->setStyleSheet(
    "QListWidget::item:hover { background: transparent; }"
    "QListWidget::item:selected { background: transparent; }"
);
